---
title: "Chap 6: Layout and themes of Shiny App"
format: html
editor: visual
---

Goal: to control the overall visual appearance of the Shiny app. Tool: Bootstrap, HTML, CSS

## 1. Single page layouts

-   Layout function: provide high-level visual structure of an app
-   Created by a hyerarchy of function calls
-   Example:

```         
fluidPage(
  titlePanel("Hello Shiny!"),
  sidebarLayout(
    sidebarPanel(
      sliderInput("obs", "Observations:", min = 0, max = 1000, value = 500)
    ),
    mainPanel(
      plotOutput("distPlot")
    )
  )
)
```

Focus on the hierarchy:

```         
fluidPage(
  titlePanel(),
  sidebarLayout(
    sidebarPanel(),
    mainPanel()
  )
)
```

### 1.1. Page functions

-   Most important layout function: [`fluidPage()`](https://rdrr.io/cran/shiny/man/fluidPage.html)
    -   A fluid page layout consists of rows which in turn include columns
    -   Rows exist for the purpose of making sure their elements appear on the same line
    -   Columns exist for the purpose of defining how much horizontal space within a 12-unit wide grid it's elements should occupy
    -   Fluid pages scale their components in realtime to fill all available browser width
-   Other functions:
    -   [`fixedPage()`](https://rdrr.io/cran/shiny/man/fixedPage.html) : has a fixed maximum width, which stops your apps from becoming unreasonable wide on bigger screens
    -   [`fillPage()`](https://rdrr.io/cran/shiny/man/fillPage.html) : fill the full height of the browser

### 1.2. Pgae with sidebar

-   To make two-column layout with inputs on the left and output on the right: use `sidebarLayout()` (along with `titlePanel()`, `sidebarPanel`, and `mainPanel()`)
-   Syntax:

```         
fluidPage(
  titlePanel(
    # app title/description
  ),
  sidebarLayout(
    sidebarPanel(
      # inputs
    ),
    mainPanel(
      # outputs
    )
  )
)
```

![Figure 6.1. Structure of a basic app with sidebar](Image/sidebar.png){fig-align="center" width="9.6cm"}

-   Example: Illustration of Central Limit Theorem

```{r}
library(shiny)

ui <- fluidPage(
  titlePanel("Central limit theorem"),
  sidebarLayout(
    sidebarPanel(
      numericInput("m", "Number of samples:", 2, min = 1, max = 100)
    ),
    mainPanel(
      plotOutput("hist")
    )
  )
)

server <- function(input, output, session) {
  output$hist <- renderPlot({
    means <- replicate(1e4, mean(runif(input$m)))
    hist(means, breaks = 20)
  }, res = 96)
}


shinyApp(ui, server)
```

### 1.3. Multi-row

-   All elements within a `fluidRow()` appears on the same line
-   Each row is made up of 12 columns and the first argument `column()` gives how many of those columns to occupy
-   Syntax:

```         
fluidPage(
  fluidRow(
    column(4, 
      ...
    ),
    column(8, 
      ...
    )
  ),
  fluidRow(
    column(6, 
      ...
    ),
    column(6, 
      ...
    )
  )
)
```

![Figure 6.2. The structure underlying a simple multi-row app](Image/multirow.png){fig-align="center" width="10.8cm"}
